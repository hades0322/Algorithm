#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <iomanip>

using namespace std;

#define T long double
#define EPS 1e-12
#define PI acos(-1, 0);

class POS{
	public:
	T x, y;
	
	POS(const T &x = 0, const T &y = 0) : x(x), y(y) {}
	POS(const POS &x) : x(x.x), y(x.y) {}
	
	POS operator -(const POS &rhs) const{
		return POS(this->x - rhs.x, this->y - rhs.y);
	}
	
	POS operator +(const POS &rhs) const{
		return POS(this->x + rhs.x, this->y + rhs.y);
	}
	
	POS operator *(const T r) const{
		return POS(this->x * r, this->y * r);
	}
	
	POS operator /(const T r) const{
		return POS(this->x / r, this->y / r);
	}
	
	bool operator ==(const POS &rhs) const{
		return (fabs(this->x - rhs.x) < EPS) && (fabs(this->y - rhs.y) < EPS);
	}
	
	friend ostream &operator<<(ostream &out, const POS &p){
		out << p.x << " " << p.y;
		return out;
	}
};

T cross(POS p, POS q){
	return p.x * q.y - p.y * q.x;
}

T dist2(POS p, POS q){
	T x = p.x - q.x, y = p.y - q.y;
	return x * x + y * y;
}

T dist(POS p, POS q){
	return sqrt(dist2(p, q));
}

POS RotateCCW(POS p, T t){
	return POS(p.x * cos(t) - p.y * sin(t), p.x * sin(t) + p.y * cos(t));
}

class LINE{
	public:
	POS start, end, vec;
	T angle;
	
	LINE(){}
	LINE(const T &st_x, const T &st_y, const T &et_x, const T &et_y) : 
		start(st_x, st_y), end(et_x, et_y), vec(end - start), 
		angle(atan2(vec.x, vec.y)) {}
	LINE(const POS &start, const POS &end) :
		start(start), end(end), vec(end - start), angle(atan2(vec.x, vec.y)) {}
};

vector<LINE> ExternalCommonTange(POS c1, T r1, POS c2, T r2){
	vector<POS> collect[2];
	vector<LINE> ans;
	POS cir[2], vec, vec90; T r[2];
	if(r1 < r2){ cir[0] = c1; r[0] = r1; cir[1] = c2; r[1] = r2; }
	else{ cir[0] = c2; r[0] = r2; cir[1] = c1; r[1] = r1; }
	
	T angle = asin((r2 - r1) / dist(cir[0], cir[1]));
	
	vec = RotateCCW(cir[1] - cir[0], angle);
	vec90 = POS(vec.y, -vec.x);
	collect[0].push_back(cir[0] + vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[0].push_back(cir[0] - vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] + vec90 * r[1] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] - vec90 * r[1] / dist(vec90, POS(0, 0)));
	for(auto p1 : collect[0])
		for(auto p2 : collect[1])
			if(fabs(cross(p1 - p2, vec)) < EPS){
				bool flag = true;
				for(auto l : ans){
					if((l.start == p1 && l.end == p2) || (l.start == p2 && l.end == p1)){
						flag = false;
						break;
					}
				}
				if(flag) ans.push_back(LINE(p1, p2));
			}
			
	collect[0].clear(); collect[1].clear();
	
	vec = RotateCCW(cir[1] - cir[0], -angle);
	vec90 = POS(vec.y, -vec.x);
	collect[0].push_back(cir[0] + vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[0].push_back(cir[0] - vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] + vec90 * r[1] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] - vec90 * r[1] / dist(vec90, POS(0, 0)));
	for(auto p1 : collect[0])
		for(auto p2 : collect[1])
			if(fabs(cross(p1 - p2, vec)) < EPS){
				bool flag = true;
				for(auto l : ans){
					if((l.start == p1 && l.end == p2) || (l.start == p2 && l.end == p1)){
						flag = false;
						break;
					}
				}
				if(flag) ans.push_back(LINE(p1, p2));
			}
			
	return ans;
}

vector<LINE> InternalCommonTange(POS c1, T r1, POS c2, T r2){
	vector<POS> collect[2];
	vector<LINE> ans;
	POS cir[2] = {c1, c2}, vec, vec90; T r[2] = {r1, r2};
	
	POS nP = cir[0] + (cir[1] - cir[0]) * r[0] / (r[0] + r[1]);
	T angle = asin(r[0] / dist(cir[0], nP));
	
	vec = RotateCCW(cir[0] - nP, angle);
	vec90 = POS(vec.y, -vec.x);
	collect[0].push_back(cir[0] + vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[0].push_back(cir[0] - vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] + vec90 * r[1] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] - vec90 * r[1] / dist(vec90, POS(0, 0)));
	for(auto p1 : collect[0])
		for(auto p2 : collect[1])
			if(fabs(cross(p1 - p2, vec)) < EPS){
				bool flag = true;
				for(auto l : ans){
					if((l.start == p1 && l.end == p2) || (l.start == p2 && l.end == p1)){
						flag = false;
						break;
					}
				}
				if(flag) ans.push_back(LINE(p1, p2));
			}
			
	collect[0].clear(); collect[1].clear();
	
	vec = RotateCCW(cir[0] - nP, -angle);
	vec90 = POS(vec.y, -vec.x);
	collect[0].push_back(cir[0] + vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[0].push_back(cir[0] - vec90 * r[0] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] + vec90 * r[1] / dist(vec90, POS(0, 0)));
	collect[1].push_back(cir[1] - vec90 * r[1] / dist(vec90, POS(0, 0)));
	for(auto p1 : collect[0])
		for(auto p2 : collect[1])
			if(fabs(cross(p1 - p2, vec)) < EPS){
				bool flag = true;
				for(auto l : ans){
					if((l.start == p1 && l.end == p2) || (l.start == p2 && l.end == p1)){
						flag = false;
						break;
					}
				}
				if(flag) ans.push_back(LINE(p1, p2));
			}
	
	return ans;
}

int cmp(POS lhs, POS rhs){
	if(fabs(lhs.x - rhs.x) > EPS) return lhs.x < rhs.x;
	return lhs.y < rhs.y;
}

int main(){
	POS circle[2];
	T r[2];
	cout << fixed << setprecision(10);
	cin >> circle[0].x >> circle[0].y >> r[0];
	cin >> circle[1].x >> circle[1].y >> r[1];
	
	vector<POS> ans;
	vector<LINE> exter = ExternalCommonTange(circle[0], r[0], circle[1], r[1]);
	vector<LINE> inter = InternalCommonTange(circle[0], r[0], circle[1], r[1]);
	for(auto l : exter)
		if(fabs(fabs(dist(l.start, circle[0])) - r[0]) < EPS)
			ans.push_back(l.start);
		else
			ans.push_back(l.end);
	
	for(auto l : inter)
		if(fabs(fabs(dist(l.start, circle[0])) - r[0]) < EPS)
			ans.push_back(l.start);
		else
			ans.push_back(l.end);
	
	sort(ans.begin(), ans.end(), cmp);
	for(auto p : ans) cout << p << endl;
	
	return 0;
}
